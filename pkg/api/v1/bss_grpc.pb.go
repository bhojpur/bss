// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BssServiceClient is the client API for BssService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BssServiceClient interface {
	// StartLocalOss starts an Operations Support System on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the bss/config.yaml
	//   3. all bytes constituting the Virtualized Operations Support System YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalOss(ctx context.Context, opts ...grpc.CallOption) (BssService_StartLocalOssClient, error)
	// StartFromPreviousOss starts a new Operations Support System based on a previous one.
	// If the previous Operations Support System does not have the can-replay condition set this call will result in an error.
	StartFromPreviousOss(ctx context.Context, in *StartFromPreviousOssRequest, opts ...grpc.CallOption) (*StartOssResponse, error)
	// StartOssRequest starts a new Operations Support System based on its specification.
	StartOss(ctx context.Context, in *StartOssRequest, opts ...grpc.CallOption) (*StartOssResponse, error)
	// Searches for Operations Support System(s) known to this instance
	ListOsss(ctx context.Context, in *ListOsssRequest, opts ...grpc.CallOption) (*ListOsssResponse, error)
	// Subscribe listens to new Operations Support System(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BssService_SubscribeClient, error)
	// GetOss retrieves details of a single Operations Support System
	GetOss(ctx context.Context, in *GetOssRequest, opts ...grpc.CallOption) (*GetOssResponse, error)
	// Listen listens to Operations Support System updates and log output of a running Operations Support System
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (BssService_ListenClient, error)
	// StopOss stops a currently running Operations Support System
	StopOss(ctx context.Context, in *StopOssRequest, opts ...grpc.CallOption) (*StopOssResponse, error)
}

type bssServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBssServiceClient(cc grpc.ClientConnInterface) BssServiceClient {
	return &bssServiceClient{cc}
}

func (c *bssServiceClient) StartLocalOss(ctx context.Context, opts ...grpc.CallOption) (BssService_StartLocalOssClient, error) {
	stream, err := c.cc.NewStream(ctx, &BssService_ServiceDesc.Streams[0], "/v1.BssService/StartLocalOss", opts...)
	if err != nil {
		return nil, err
	}
	x := &bssServiceStartLocalOssClient{stream}
	return x, nil
}

type BssService_StartLocalOssClient interface {
	Send(*StartLocalOssRequest) error
	CloseAndRecv() (*StartOssResponse, error)
	grpc.ClientStream
}

type bssServiceStartLocalOssClient struct {
	grpc.ClientStream
}

func (x *bssServiceStartLocalOssClient) Send(m *StartLocalOssRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bssServiceStartLocalOssClient) CloseAndRecv() (*StartOssResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartOssResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bssServiceClient) StartFromPreviousOss(ctx context.Context, in *StartFromPreviousOssRequest, opts ...grpc.CallOption) (*StartOssResponse, error) {
	out := new(StartOssResponse)
	err := c.cc.Invoke(ctx, "/v1.BssService/StartFromPreviousOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssServiceClient) StartOss(ctx context.Context, in *StartOssRequest, opts ...grpc.CallOption) (*StartOssResponse, error) {
	out := new(StartOssResponse)
	err := c.cc.Invoke(ctx, "/v1.BssService/StartOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssServiceClient) ListOsss(ctx context.Context, in *ListOsssRequest, opts ...grpc.CallOption) (*ListOsssResponse, error) {
	out := new(ListOsssResponse)
	err := c.cc.Invoke(ctx, "/v1.BssService/ListOsss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BssService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &BssService_ServiceDesc.Streams[1], "/v1.BssService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &bssServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BssService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type bssServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *bssServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bssServiceClient) GetOss(ctx context.Context, in *GetOssRequest, opts ...grpc.CallOption) (*GetOssResponse, error) {
	out := new(GetOssResponse)
	err := c.cc.Invoke(ctx, "/v1.BssService/GetOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bssServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (BssService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &BssService_ServiceDesc.Streams[2], "/v1.BssService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &bssServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BssService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type bssServiceListenClient struct {
	grpc.ClientStream
}

func (x *bssServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bssServiceClient) StopOss(ctx context.Context, in *StopOssRequest, opts ...grpc.CallOption) (*StopOssResponse, error) {
	out := new(StopOssResponse)
	err := c.cc.Invoke(ctx, "/v1.BssService/StopOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BssServiceServer is the server API for BssService service.
// All implementations must embed UnimplementedBssServiceServer
// for forward compatibility
type BssServiceServer interface {
	// StartLocalOss starts an Operations Support System on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the bss/config.yaml
	//   3. all bytes constituting the Virtualized Operations Support System YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalOss(BssService_StartLocalOssServer) error
	// StartFromPreviousOss starts a new Operations Support System based on a previous one.
	// If the previous Operations Support System does not have the can-replay condition set this call will result in an error.
	StartFromPreviousOss(context.Context, *StartFromPreviousOssRequest) (*StartOssResponse, error)
	// StartOssRequest starts a new Operations Support System based on its specification.
	StartOss(context.Context, *StartOssRequest) (*StartOssResponse, error)
	// Searches for Operations Support System(s) known to this instance
	ListOsss(context.Context, *ListOsssRequest) (*ListOsssResponse, error)
	// Subscribe listens to new Operations Support System(s) updates
	Subscribe(*SubscribeRequest, BssService_SubscribeServer) error
	// GetOss retrieves details of a single Operations Support System
	GetOss(context.Context, *GetOssRequest) (*GetOssResponse, error)
	// Listen listens to Operations Support System updates and log output of a running Operations Support System
	Listen(*ListenRequest, BssService_ListenServer) error
	// StopOss stops a currently running Operations Support System
	StopOss(context.Context, *StopOssRequest) (*StopOssResponse, error)
	mustEmbedUnimplementedBssServiceServer()
}

// UnimplementedBssServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBssServiceServer struct {
}

func (UnimplementedBssServiceServer) StartLocalOss(BssService_StartLocalOssServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalOss not implemented")
}
func (UnimplementedBssServiceServer) StartFromPreviousOss(context.Context, *StartFromPreviousOssRequest) (*StartOssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousOss not implemented")
}
func (UnimplementedBssServiceServer) StartOss(context.Context, *StartOssRequest) (*StartOssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOss not implemented")
}
func (UnimplementedBssServiceServer) ListOsss(context.Context, *ListOsssRequest) (*ListOsssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOsss not implemented")
}
func (UnimplementedBssServiceServer) Subscribe(*SubscribeRequest, BssService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBssServiceServer) GetOss(context.Context, *GetOssRequest) (*GetOssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOss not implemented")
}
func (UnimplementedBssServiceServer) Listen(*ListenRequest, BssService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedBssServiceServer) StopOss(context.Context, *StopOssRequest) (*StopOssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOss not implemented")
}
func (UnimplementedBssServiceServer) mustEmbedUnimplementedBssServiceServer() {}

// UnsafeBssServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BssServiceServer will
// result in compilation errors.
type UnsafeBssServiceServer interface {
	mustEmbedUnimplementedBssServiceServer()
}

func RegisterBssServiceServer(s grpc.ServiceRegistrar, srv BssServiceServer) {
	s.RegisterService(&BssService_ServiceDesc, srv)
}

func _BssService_StartLocalOss_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BssServiceServer).StartLocalOss(&bssServiceStartLocalOssServer{stream})
}

type BssService_StartLocalOssServer interface {
	SendAndClose(*StartOssResponse) error
	Recv() (*StartLocalOssRequest, error)
	grpc.ServerStream
}

type bssServiceStartLocalOssServer struct {
	grpc.ServerStream
}

func (x *bssServiceStartLocalOssServer) SendAndClose(m *StartOssResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bssServiceStartLocalOssServer) Recv() (*StartLocalOssRequest, error) {
	m := new(StartLocalOssRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BssService_StartFromPreviousOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousOssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssServiceServer).StartFromPreviousOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BssService/StartFromPreviousOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssServiceServer).StartFromPreviousOss(ctx, req.(*StartFromPreviousOssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssService_StartOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssServiceServer).StartOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BssService/StartOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssServiceServer).StartOss(ctx, req.(*StartOssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssService_ListOsss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOsssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssServiceServer).ListOsss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BssService/ListOsss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssServiceServer).ListOsss(ctx, req.(*ListOsssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BssServiceServer).Subscribe(m, &bssServiceSubscribeServer{stream})
}

type BssService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type bssServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *bssServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BssService_GetOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssServiceServer).GetOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BssService/GetOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssServiceServer).GetOss(ctx, req.(*GetOssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BssService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BssServiceServer).Listen(m, &bssServiceListenServer{stream})
}

type BssService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type bssServiceListenServer struct {
	grpc.ServerStream
}

func (x *bssServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BssService_StopOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopOssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BssServiceServer).StopOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BssService/StopOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BssServiceServer).StopOss(ctx, req.(*StopOssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BssService_ServiceDesc is the grpc.ServiceDesc for BssService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BssService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BssService",
	HandlerType: (*BssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousOss",
			Handler:    _BssService_StartFromPreviousOss_Handler,
		},
		{
			MethodName: "StartOss",
			Handler:    _BssService_StartOss_Handler,
		},
		{
			MethodName: "ListOsss",
			Handler:    _BssService_ListOsss_Handler,
		},
		{
			MethodName: "GetOss",
			Handler:    _BssService_GetOss_Handler,
		},
		{
			MethodName: "StopOss",
			Handler:    _BssService_StopOss_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalOss",
			Handler:       _BssService_StartLocalOss_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _BssService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _BssService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bss.proto",
}
